<?xml version="1.0" encoding="UTF-8"?>
<!-- CS636 database utilities (same as pizza1's database/build.xml, except proj name)
  Requires JDK's bin and ant's bin on command-line's path (check that javac 
      and ant work on the command line)
  Requires env variables ORACLE_USER, ORACLE_PW, ORACLE_SITE, MYSQL_USER, MYSQL_PW 
 -->
<project name="music4 DBhelpers">
	<!--Load environment variables and give them prefix "env." -->
	<!-- ORACLE_SITE should be "localhost:2222:dbs2" at home (for putty
		tunnel to dbs2.cs.umb.edu), and "dbs2.cs.umb.edu:1521:dbs2" at cs.umb.edu -->
	<property environment="env" />
	<property name="ORACLE_USER" value="${env.ORACLE_USER}" />
	<property name="ORACLE_PW" value="${env.ORACLE_PW}" />
	<property name="ORACLE_SITE" value="${env.ORACLE_SITE}" />
	<property name="MYSQL_USER" value="${env.MYSQL_USER}" />
	<property name="MYSQL_PW" value="${env.MYSQL_PW}" />
	<!--Change the following to "localhost" for local MySQL installations -->
	<property name="MYSQL_SERVER" value="sf08.cs.umb.edu" />

	<path id="project.classpath">
		<pathelement location="../lib/ojdbc6.jar" />
		<pathelement location="../lib/hsqldb.jar" />
		<pathelement location="../lib/mysql-connector-java-5.1.8-bin.jar" />
	</path>
	<!-- ==========================Oracle DB helpers================== -->
	<!-- Oracle should always be up and ready to work for you, so all you have to
		do is load the tables once and use it. From home, you need a "putty tunnel"
		to access the Oracle port. See the Development Setup document.
	-->
	<target name="load-oradb" description="Load Oracle database">
		<sql classpathref="project.classpath" driver="oracle.jdbc.OracleDriver" 
			url="jdbc:oracle:thin:@${ORACLE_SITE}" userid="${ORACLE_USER}" 
			password="${ORACLE_PW}" src="createdb.sql" />
	</target>

        <target name="load-ora-download" description="Load Oracle download table">
		<sql classpathref="project.classpath" driver="oracle.jdbc.OracleDriver" 
			url="jdbc:oracle:thin:@${ORACLE_SITE}" userid="${ORACLE_USER}" 
			password="${ORACLE_PW}" src="load_downloads.sql" />
	</target>

	<target name="show-oradb" description="Display Oracle tables">
		<sql classpathref="project.classpath" driver="oracle.jdbc.OracleDriver" 
			url="jdbc:oracle:thin:@${ORACLE_SITE}" userid="${ORACLE_USER}" 
			password="${ORACLE_PW}" print="true" src="showdb.sql">
		</sql>
	</target>
	<!-- use onerror continue to keep going if a table is not there -->
	<target name="drop-oradb" description="drop Oracle tables">
		<sql classpathref="project.classpath" driver="oracle.jdbc.OracleDriver" 
			url="jdbc:oracle:thin:@${ORACLE_SITE}" userid="${ORACLE_USER}" 
			password="${ORACLE_PW}" src="dropdb.sql" onerror="continue" />
	</target>

	<!-- ==========================MySql DB helpers================== -->
	<!-- Mysql should always be up and ready to work for you, so all you have to
		do is load the tables once and use it. 
	-->
	<target name="load-mysqldb" description="Load Mysql database">
		<sql classpathref="project.classpath" driver="com.mysql.jdbc.Driver" 
			url="jdbc:mysql://${MYSQL_SERVER}/${MYSQL_USER}db" userid="${MYSQL_USER}" 
			password="${MYSQL_PW}" src="createdb.sql" />
	</target>

	<target name="load-mysql-download" description="Load Mysql download table">
		<sql classpathref="project.classpath" driver="com.mysql.jdbc.Driver" 
			url="jdbc:mysql://${MYSQL_SERVER}/${MYSQL_USER}db" userid="${MYSQL_USER}" 
			password="${MYSQL_PW}" src="load_downloads.sql" />
	</target>
        

	<target name="show-mysqldb" description="Display tables">
		<sql classpathref="project.classpath" driver="com.mysql.jdbc.Driver" 
			url="jdbc:mysql://${MYSQL_SERVER}/${MYSQL_USER}db" userid="${MYSQL_USER}" 
			password="${MYSQL_PW}" print="true" src="showdb.sql">
		</sql>
	</target>
	<target name="drop-mysqldb" description="drop Mysql tables">
		<sql classpathref="project.classpath" driver="com.mysql.jdbc.Driver" 
			url="jdbc:mysql://${MYSQL_SERVER}/${MYSQL_USER}db" userid="${MYSQL_USER}" 
			password="${MYSQL_PW}" src="dropdb.sql" onerror="continue" />
	</target>

	<!-- ==========================HSQLDB helpers================== -->
	<!-- Unlike Oracle, HSQLDB comes and goes at our whim. We start it up when we
			want to use it, leave it running in a process while we do our testing,
			and then bring it down.  Each time we bring it up, we make it start off
			empty, so we need to load the tables before running the app.
		-->
	<!-- Start the HSQL DB server: do this before running apps -->
	<target name="start-hsqldb" description="Run HSQL database server">
		<!-- Delete HSQLDB's database script and log, its record of past actions -->
		<delete file="test.script" />
		<delete file="test.log" />
		<copy file="hsqldb_startup.script" tofile="test.script" overwrite="true" />
		<java classname="org.hsqldb.Server" fork="true" classpathref="project.classpath" 
			failonerror="true">
		</java>
	</target>

	<target name="shutdown-hsqldb" description="Shutdown HSQL database">
		<sql classpathref="project.classpath" driver="org.hsqldb.jdbcDriver" 
			url="jdbc:hsqldb:hsql://localhost/" userid="sa" password="" autocommit="true">
	       shutdown
	       </sql>
	</target>

	<target name="load-hsqldb" description="Load HSQL database">
		<sql classpathref="project.classpath" driver="org.hsqldb.jdbcDriver" 
			url="jdbc:hsqldb:hsql://localhost/" userid="sa" password="" src="createdb.sql" />
	</target>

        <target name="load-hsql-download" description="Load HSQL download table">
		<sql classpathref="project.classpath" driver="org.hsqldb.jdbcDriver" 
			url="jdbc:hsqldb:hsql://localhost/" userid="sa" password="" src="load_downloads_hsqldb.sql" />
	</target>
 
	<target name="show-hsqldb" description="Show  HSQL database ">
		<sql classpathref="project.classpath" driver="org.hsqldb.jdbcDriver" 
			url="jdbc:hsqldb:hsql://localhost/" userid="sa" password="" src="showdb.sql" print="true" />
	</target>
	<target name="drop-hsqldb" description="Drop HSQL database">
		<sql classpathref="project.classpath" driver="org.hsqldb.jdbcDriver" 
			url="jdbc:hsqldb:hsql://localhost/" userid="sa" password="" src="dropdb.sql" 
			onerror="continue" />
	</target>

</project>
